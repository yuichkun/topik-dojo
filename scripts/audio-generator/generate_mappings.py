import os
import json
from datetime import datetime


def scan_audio_files(audio_dir):
    """Scan the audio directory and return sets of existing files"""
    words_dir = os.path.join(audio_dir, "words")
    examples_dir = os.path.join(audio_dir, "examples")
    
    word_files = set()
    example_files = set()
    
    # Scan word audio files
    if os.path.exists(words_dir):
        for filename in os.listdir(words_dir):
            if filename.endswith('.mp3'):
                # Remove .mp3 extension to get the korean word
                korean = filename[:-4]
                word_files.add(korean)
    
    # Scan example audio files
    if os.path.exists(examples_dir):
        for filename in os.listdir(examples_dir):
            if filename.endswith('.mp3'):
                # Remove .mp3 extension to get the korean word
                korean = filename[:-4]
                example_files.add(korean)
    
    return word_files, example_files


def create_audio_mappings(word_files, example_files):
    """Create the JavaScript mapping file for audio assets"""
    mappings_path = os.path.join(
        os.path.dirname(__file__), "..", "..", "src", "assets", "audioMappings.js"
    )
    
    # Read words.json to get the full list and validate
    words_path = os.path.join(
        os.path.dirname(__file__), "..", "..", "src", "assets", "words.json"
    )
    with open(words_path, "r", encoding="utf-8") as f:
        words_data = json.load(f)
    
    # Validate that all audio files have corresponding entries in words.json
    valid_word_files = set()
    valid_example_files = set()
    orphaned_files = []
    
    all_korean_words = {word["korean"] for word in words_data.values() if word.get("korean")}
    
    # Check word files
    for korean in word_files:
        if korean in all_korean_words:
            valid_word_files.add(korean)
        else:
            orphaned_files.append(f"words/{korean}.mp3")
    
    # Check example files
    for korean in example_files:
        if korean in all_korean_words:
            valid_example_files.add(korean)
        else:
            orphaned_files.append(f"examples/{korean}.mp3")
    
    # Write the mappings file
    with open(mappings_path, "w", encoding="utf-8") as f:
        f.write("// AUTO-GENERATED FILE - DO NOT EDIT\n")
        f.write("// This file is automatically generated by scripts/audio-generator/generate_mappings.py\n")
        f.write(f"// Last generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        # Write word audio mappings
        f.write("export const wordAudioMap = {\n")
        for korean in sorted(valid_word_files):
            # Escape single quotes and backslashes in the key
            escaped_korean = korean.replace("\\", "\\\\").replace("'", "\\'")
            # Also escape in the require path
            escaped_path = korean.replace("\\", "\\\\").replace("'", "\\'")
            f.write(f"  '{escaped_korean}': require('./audio/words/{escaped_path}.mp3'),\n")
        f.write("};\n\n")
        
        # Write example audio mappings
        f.write("export const exampleAudioMap = {\n")
        for korean in sorted(valid_example_files):
            # Escape single quotes and backslashes in the key
            escaped_korean = korean.replace("\\", "\\\\").replace("'", "\\'")
            # Also escape in the require path
            escaped_path = korean.replace("\\", "\\\\").replace("'", "\\'")
            f.write(f"  '{escaped_korean}': require('./audio/examples/{escaped_path}.mp3'),\n")
        f.write("};\n")
    
    return mappings_path, valid_word_files, valid_example_files, orphaned_files


def main():
    print("=== Audio Mapping Generator ===")
    print(f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 40)
    
    # Get the audio directory path
    audio_dir = os.path.join(
        os.path.dirname(__file__), "..", "..", "src", "assets", "audio"
    )
    
    if not os.path.exists(audio_dir):
        print(f"ERROR: Audio directory not found: {audio_dir}")
        print("Please run the audio generator script first.")
        return
    
    # Scan for existing audio files
    print(f"Scanning audio directory: {audio_dir}")
    word_files, example_files = scan_audio_files(audio_dir)
    
    print(f"\nFound audio files:")
    print(f"  - Word audio files: {len(word_files)}")
    print(f"  - Example audio files: {len(example_files)}")
    
    if not word_files and not example_files:
        print("\nNo audio files found! Please run the audio generator script first.")
        return
    
    # Create the mappings
    print("\nGenerating audio mappings...")
    mappings_path, valid_words, valid_examples, orphaned = create_audio_mappings(word_files, example_files)
    
    print(f"\nCreated audio mappings file: {mappings_path}")
    print(f"  - Valid word mappings: {len(valid_words)}")
    print(f"  - Valid example mappings: {len(valid_examples)}")
    
    if orphaned:
        print(f"\nWARNING: Found {len(orphaned)} orphaned audio files (no matching entry in words.json):")
        for file in orphaned[:10]:  # Show first 10
            print(f"  - {file}")
        if len(orphaned) > 10:
            print(f"  ... and {len(orphaned) - 10} more")
    
    # Show coverage statistics
    words_path = os.path.join(
        os.path.dirname(__file__), "..", "..", "src", "assets", "words.json"
    )
    with open(words_path, "r", encoding="utf-8") as f:
        words_data = json.load(f)
    
    total_words = len([w for w in words_data.values() if w.get("korean")])
    total_examples = len([w for w in words_data.values() if w.get("korean_example_sentence")])
    
    word_coverage = (len(valid_words) / total_words * 100) if total_words > 0 else 0
    example_coverage = (len(valid_examples) / total_examples * 100) if total_examples > 0 else 0
    
    print(f"\nCoverage Statistics:")
    print(f"  - Words: {len(valid_words)}/{total_words} ({word_coverage:.1f}%)")
    print(f"  - Examples: {len(valid_examples)}/{total_examples} ({example_coverage:.1f}%)")
    
    print("\nDone!")


if __name__ == "__main__":
    main()